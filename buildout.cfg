[buildout]
allow-unknown-extras = false
show-picked-versions = true
download-cache = ${buildout:directory}/downloads
extensions = mr.developer
auto-checkout = ${buildout:custom-eggs}
always-checkout = force

extends =
    configurations/config.ini

custom-eggs =

parts =
    system-eggs
    system-eggs-dependencies
    django
    python-interpreter
    config-generator
    start-service
    stop-service

[extra-configs]
extra-paths =
    ${buildout:directory}/WEB_SERVE/
    ${buildout:directory}/core/

django-initialization =
    # Patch the manage file for django-configurations
    import os

    # Initialize the build directory
    os.environ['BUILD_HOME'] = '${buildout:directory}'

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'WEB_SERVE.settings')
    os.environ.setdefault('DJANGO_CONFIGURATION', 'DjangoConfigurations')
    from configurations.management import execute_from_command_line

    import django
    django.core.management.execute_from_command_line = execute_from_command_line

[system-eggs]
recipe = osc.recipe.sysegg
force-sysegg = true
eggs =
    django

[system-eggs-dependencies]
recipe = zc.recipe.egg
eggs =
    pytest
    gunicorn
    ${buildout:custom-eggs}

extra-paths = ${extra-configs:extra-paths}
initialization = ${extra-configs:django-initialization}

[django]
recipe = djangorecipe
project = WEB_SERVE
settings = settings
control-script = django-ctrl
extra-paths = ${extra-configs:extra-paths}
eggs =
    ${system-eggs:eggs}
    ${buildout:custom-eggs}

initialization = ${extra-configs:django-initialization}

[python-interpreter]
recipe = zc.recipe.egg
interpreter = pyshell
eggs =
    ${buildout:custom-eggs}

# This here is what makes the gunicorn script aware of our app
extra-paths = ${extra-configs:extra-paths}

initialization =
    ${django:initialization}

[start-service]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    ${buildout:directory}/bin/gunicorn -b 0.0.0.0:${django-settings:django_first_port} --workers ${django-settings:django_concurrent_process} --threads ${django-settings:gunicorn_threads} WEB_SERVE.wsgi:application &
output = ${buildout:bin-directory}/start-service
mode = 755

[stop-service]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash

    #
    # Stops the service in the CentOS
    kill -9 $(/usr/sbin/lsof -t -i:${django-settings:django_first_port}) > /dev/null 2>&1
    #
    # Stops the service in Ubuntu
    kill -9 $(/usr/bin/lsof -t -i:${django-settings:django_first_port}) > /dev/null 2>&1
    #
    # Make a clean exit
    exit 0
output = ${buildout:bin-directory}/stop-service
mode = 755

[config-generator]
recipe = collective.recipe.template
output = ${buildout:directory}/parts/config/config.ini
input = inline:
    [django-settings]
    debug = ${django-settings:debug}
    django_first_port = ${django-settings:django_first_port}
    django_concurrent_process = ${django-settings:django_concurrent_process}
    gunicorn_threads = ${django-settings:gunicorn_threads}

    [python-logger-settings]
    log_dir = ${buildout:directory}/../../var/log
    log_file_name = ${python-logger-settings:log_file_name}
    loglevel = ${python-logger-settings:loglevel}
    logger_name = ${python-logger-settings:logger_name}
    max_file_size = ${python-logger-settings:max_file_size}
    file_backup_count = ${python-logger-settings:file_backup_count}

    [database]
    database = ${database:database}

    [sqlite]
    database_name = ${sqlite:database_name}

